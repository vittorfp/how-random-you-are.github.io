{"version":3,"sources":["shared/util/AxiosCache.js","shared/util/AxiosWrapper.js","axiosInstance.js","shared/util/RequestUtil.js","services/TesteAleatoriedadeService.js","features/testeAleatoriedade/TesteAleatoriedadeManager.js","features/testeAleatoriedade/views/TesteAleatoriedade.jsx"],"names":["AxiosCache","this","data","window","cacheTeste","key","value","url","method","params","querystringParts","p","undefined","push","length","sort","join","stringifyQueryString","AxiosWrapper","axiosInstance","options","axios","defaultErrorHandler","cache","config","doRequest","shouldCache","hasOwnProperty","cacheKey","_getCacheKey","cachedValue","_getCachedValue","shouldNotHandleError","handleError","promisse","apply","_cacheRequest","then","response","status","put","get","getKey","create","headers","Pragma","baseURL","configureEnvironment","API_GATEWAY_URL","interceptors","request","use","a","error","mensagem","store","dispatch","exibirNotificacao","sequence","ObterAleatoriedade","TesteAleatoriedadeService","useStyles","makeStyles","theme","container","padding","width","root","margin","spacing","TesteAleatoriedade","classes","React","useState","aleatoriety","setAleatoriety","setSequence","charCount","setCharCount","Grid","direction","justify","alignItems","item","xs","className","Typography","variant","title","align","Paper","elevation","text","TextField","fullWidth","multiline","label","rows","maxRows","inputProps","maxLength","helperText","onChange","event","target","Divider","Button","onClick","TesteAleatoriedadeManager","randomness","toFixed","calculaAleatoriedade","disabled","color"],"mappings":"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","file":"static/js/4.bdb3b74b.chunk.js","sourcesContent":["export default class AxiosCache {\r\n  constructor() {\r\n    this.data = {};\r\n    window.cacheTeste = this;\r\n  }\r\n\r\n  put(key, value) {\r\n    this.data[key] = value;\r\n  }\r\n\r\n  get(key) {\r\n    return this.data[key];\r\n  }\r\n\r\n  getKey(url, method, params) {\r\n    return method + \" \" + url + stringifyQueryString(params);\r\n  }\r\n}\r\n\r\nfunction stringifyQueryString(params) {\r\n  if (!params) return \"\";\r\n  let querystringParts = [];\r\n\r\n  for (let p in params) {\r\n    if (params[p] !== null && params[p] !== undefined) {\r\n      querystringParts.push(p + \"=\" + params[p]);\r\n    }\r\n  }\r\n\r\n  if (querystringParts.length === 0) return \"\";\r\n\r\n  return \"?\" + querystringParts.sort().join(\"&\");\r\n}","import AxiosCache from './AxiosCache';\r\n\r\nexport default class AxiosWrapper {\r\n  constructor(axiosInstance, options) {\r\n    this.axios = axiosInstance;\r\n    this.defaultErrorHandler = options && options.defaultErrorHandler;\r\n    this.cache = new AxiosCache();\r\n  }\r\n\r\n  async request(config) {\r\n    return await this.doRequest(config, 'request', arguments);\r\n  }\r\n\r\n  async get(url, config) {\r\n    return await this.doRequest(config, 'get', arguments);\r\n  }\r\n\r\n  async post(url, data, config) {\r\n    return await this.doRequest(config, 'post', arguments);\r\n  }\r\n\r\n  async put(url, data, config) {\r\n    return await this.doRequest(config, 'put', arguments);\r\n  }\r\n\r\n  async delete(url, config) {\r\n    return await this.doRequest(config, 'delete', arguments);\r\n  }\r\n\r\n  async head(url, config) {\r\n    return await this.doRequest(config, 'head', arguments);\r\n  }\r\n\r\n  async options(url, config) {\r\n    return await this.doRequest(config, 'options', arguments);\r\n  }\r\n\r\n  async patch(url, data, config) {\r\n    return await this.doRequest(config, 'patch', arguments);\r\n  }\r\n\r\n  async doRequest(config, method, params) {\r\n\r\n    let shouldCache = method === 'get' && config && config.hasOwnProperty('cache') && config.cache === true;\r\n    let cacheKey = !!shouldCache && this._getCacheKey(method, params);      \r\n    let cachedValue = this._getCachedValue(shouldCache, cacheKey);\r\n\r\n    let shouldNotHandleError = config && config.hasOwnProperty('handleError') && config.handleError === false;\r\n    let promisse;\r\n\r\n    if (cachedValue)\r\n      return await cachedValue;\r\n\r\n    if (shouldNotHandleError) {\r\n\r\n      promisse = this.axios[method].apply(this.axios, params);\r\n      return await this._cacheRequest(shouldCache, cacheKey, promisse);\r\n    }\r\n\r\n    try {\r\n      \r\n      promisse = this.axios[method].apply(this.axios, params);\r\n      return await this._cacheRequest(shouldCache, cacheKey, promisse);\r\n\r\n    } catch(e) {\r\n\r\n      this.defaultErrorHandler(e);\r\n    }\r\n  }\r\n\r\n  _cacheRequest(shouldCache, key, promisse) {\r\n\r\n    if (shouldCache) {\r\n\r\n      promisse.then(response => {\r\n        \r\n        if (response.status === 200 && response.data)\r\n          this.cache.put(key, response.data);\r\n      });\r\n    }\r\n      \r\n    return promisse;\r\n  }\r\n\r\n  _getCachedValue(shouldCache, key) {\r\n\r\n    if (!shouldCache) return;\r\n\r\n      let cachedValue = this.cache.get(key);\r\n\r\n      if (cachedValue)\r\n        return { status: 200, data: cachedValue }; \r\n  }\r\n\r\n  _getCacheKey(method, params) {\r\n    return this.cache.getKey(params[0], method, params[1] && params[1].params);\r\n  }\r\n}","import axios from \"axios\";\r\nimport AxiosWrapper from \"./shared/util/AxiosWrapper\";\r\nimport { configureEnvironment } from \"./config/env\";\r\nimport { handleRequestError } from \"./shared/util/RequestUtil\";\r\n\r\nconst header = { Pragma: \"no-cache\" };\r\n\r\nconst axiosInstance = axios.create({\r\n  headers: header,\r\n  baseURL: configureEnvironment().API_GATEWAY_URL,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(async (config) => {\r\n  return config;\r\n});\r\n\r\nexport default new AxiosWrapper(axiosInstance, {\r\n  defaultErrorHandler: handleRequestError,\r\n});\r\n","import store from \"../../store\";\r\nimport { exibirNotificacao } from '../../features/mensagemAlerta/Store';\r\n\r\nconst mensagemErroPadrao = \"Ocorreu um erro ao executar a operação.\";\r\n\r\nexport function handleRequestError(error) {\r\n  let mensagem = error.response && error.response.data && error.response.data.mensagem;\r\n\r\n  store.dispatch(exibirNotificacao(mensagem || mensagemErroPadrao));\r\n}","import axios from '../axiosInstance';\r\n\r\nclass TesteAleatoriedadeService {\r\n  async ObterAleatoriedade(sequence) {\r\n    return await axios.get(`/computeRandomness?sequence=${sequence}`);\r\n  }\r\n}\r\n\r\nexport default new TesteAleatoriedadeService();","import TesteAleatoriedadeService from \"../../services/TesteAleatoriedadeService\"\n\n\nclass TesteAleatoriedadeManager {\n    ObterAleatoriedade = (sequence) => {\n        return TesteAleatoriedadeService.ObterAleatoriedade(sequence)\n            .then(response => response.data);\n    }\n}\n\nexport default new TesteAleatoriedadeManager()","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Grid,\n    Paper,\n    TextField,\n    Button,\n    Typography,\n    Divider\n} from \"@material-ui/core\";\nimport TesteAleatoriedadeManager from \"../TesteAleatoriedadeManager\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding: '24px',\n        width: 500,\n    },\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst minLength = 200;\n\n\nexport const TesteAleatoriedade = () => {\n    const classes = useStyles();\n    const [aleatoriety, setAleatoriety] = React.useState(false);\n\n    const [sequence, setSequence] = React.useState('');\n    const [charCount, setCharCount] = React.useState(0);\n\n    const handleSequenceChange = (event) => {\n        setCharCount(event.target.value.length);\n        setSequence(event.target.value);\n    };\n\n    const handleSendButton = (event) => {\n        const calculaAleatoriedade = async () => {\n            const randomness = await TesteAleatoriedadeManager.ObterAleatoriedade(sequence);\n            if (!randomness) return;\n            setAleatoriety(`${(randomness * 100).toFixed(2)}%`);\n        }\n        calculaAleatoriedade();\n    };\n\n    const readyToGo = () => {\n        return sequence.length >= minLength;\n    };\n\n    return (\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Grid item xs=\"auto\" />\n            <Grid container item direction=\"column\" className={classes.container} spacing={5}>\n                <Grid item>\n                    <Typography variant=\"h1\" className={classes.title} align={\"center\"}>Test your randomness</Typography>\n                </Grid>\n                <Paper elevation={0} variant=\"outlined\">\n                    <Grid container direction=\"column\" className={classes.container} spacing={3}>\n\n                        <Grid item>\n                            <Typography className={classes.text}>\n                                Digite uma sequencia de aleatoria de 1 e 0s\n                            </Typography>\n                        </Grid>\n\n                        <Grid item>\n                            <TextField fullWidth multiline\n                                label=\"Random sequence\"\n                                rows={7}\n                                maxRows={5}\n                                variant=\"outlined\"\n                                inputProps={{\n                                    maxLength: minLength,\n                                }}\n                                helperText={`${charCount}/${minLength}`}\n                                onChange={handleSequenceChange}\n                            />\n                        </Grid>\n\n                        <Divider />\n                        <Grid item container >\n                            <Button fullWidth\n                                variant=\"contained\"\n                                onClick={handleSendButton}\n                                disabled={!readyToGo()}\n                                color=\"secondary\"\n                            >\n                                Go!\n                        </Button>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Grid>\n            {aleatoriety ?\n                <Grid item direction=\"row\" className={classes.container} >\n                    <Paper elevation={0} >\n                        <Typography> Você é </Typography>\n                        <Typography variant=\"h1\">\n                            {aleatoriety}\n                        </Typography>\n\n                        <Typography>Aleatorio </Typography>\n                    </Paper>\n                </Grid>\n                : null}\n        </Grid>\n    );\n};\n\nexport default TesteAleatoriedade;"],"sourceRoot":""}